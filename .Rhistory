source('Utils.R')
})
registerDoParallel(cl)
null = foreach(i = 1:250) %:%
foreach(j = 251:500, .combine = rbind) %dopar% {
h1 = readRDS(file.path(null_path, list.files(null_path)[i]))
h2 = readRDS(file.path(null_path, list.files(null_path)[j]))
hypervolume_overlap_statistics(hypervolume_set(h1, h2, check.memory = FALSE))
}
null
rbind(null)
append(null)
merge(null)
foreach(i = null, .combine = rbind) %do% {}
foreach(i = null, .combine = rbind) %do% {i}
null = foreach(i = 1:250, .combine = rbind) %:%
foreach(j = 251:500, .combine = rbind) %dopar% {
h1 = readRDS(file.path(null_path, list.files(null_path)[i]))
h2 = readRDS(file.path(null_path, list.files(null_path)[j]))
hypervolume_overlap_statistics(hypervolume_set(h1, h2, check.memory = FALSE))
}
ggplot(data.frame(null), aes(x = jaccard, y = ..density..)) + geom_histogram()
ggplot(data.frame(null), aes(x = jaccard, y = ..density..)) + geom_histogram(bins = 50)
ggplot(data.frame(null), aes(x = jaccard, y = ..density..)) + geom_histogram(bins = 100)
#null_path = resample("quercus_150_null", population_hat, "bootstrap", n = 500, points_per_resample = 150, cores = 20)
null_path = "C:/Users/14842/Desktop/Hypervolumes-Resampling/Objects/quercus_150_null"
observed = hypervolume_overlap_statistics(hypervolume_set(hv1, hv2, check.memory = FALSE))
observed
observed["jaccard"]
ggplot(data.frame(null), aes(x = jaccard, y = ..density..)) + geom_histogram(bins = 100) + geom_point(aes(x = observed["jaccard"], y = 0, color = "red"))
ggplot(data.frame(null), aes(x = jaccard, y = ..density..)) + geom_histogram(bins = 100) + geom_point(aes(x = observed["jaccard"], y = 0, color = "red")) + ggtitle("Distribution of jaccard distance")
ggplot(data.frame(null), aes(x = sorensen, y = ..density..)) + geom_histogram(bins = 100) + geom_point(aes(x = observed["sorensen"], y = 0, color = "red")) + ggtitle("Distribution of sorensen distance")
ggplot(data.frame(null), aes(x = jaccard, y = ..density..)) + geom_histogram(bins = 100) + geom_point(aes(x = observed["jaccard"], y = 0, color = "red")) + ggtitle("Distribution of jaccard distance")
ggplot(data.frame(null), aes(x = sorensen, y = ..density..)) + geom_histogram(bins = 100) + geom_point(aes(x = observed["sorensen"], y = 0, color = "red")) + ggtitle("Distribution of sorensen distance")
ggplot(data.frame(null), aes(x = frac_unique_1, y = ..density..)) + geom_histogram(bins = 100) + geom_point(aes(x = observed["frac_unique_1"], y = 0, color = "red")) + ggtitle("Distribution of fraction of Hypervolume 1 that is unique")
ggplot(data.frame(null), aes(x = frac_unique_2, y = ..density..)) + geom_histogram(bins = 100) + geom_point(aes(x = observed["frac_unique_2"], y = 0, color = "red")) + ggtitle("Distribution of fraction of Hypervolume 2 that is unique")
ggplot(data.frame(samples = c(sample1, sample2), x = seq(-3, 3, length.out = 300))) +
geom_histogram(aes(x = samples, y = ..density.., alpha = 0.5), bins = 30) +
stat_function(fun = func)
data("quercus")
qsample1 = quercus[sample(1:nrow(quercus), 150),]
qsample2 = quercus[sample(1:nrow(quercus), 150),]
combined_sample = rbind(qsample1, qsample2)
ggplot(data = combined_sample, aes(x = Latitude, y = ..density.., fill = "red", alpha = 0.5)) + geom_histogram() + geom_histogram(data = quercus, aes(x = Latitude, y = ..density.., fill = "blue", alpha = 0.5)) + ggtitle("Red: combined samples \tBlue: original data")
data("quercus")
qsample1 = quercus[sample(1:nrow(quercus), 150),]
qsample2 = quercus[sample(1:nrow(quercus), 150),]
combined_sample = rbind(qsample1, qsample2)
ggplot(data = combined_sample, aes(x = Latitude, y = ..density.., fill = "red", alpha = 0.5)) + geom_histogram() + geom_histogram(data = quercus, aes(x = Latitude, y = ..density.., fill = "blue", alpha = 0.5)) + ggtitle("Red: combined samples \t\tBlue: original data")
data("quercus")
qsample1 = quercus[sample(1:nrow(quercus), 150),]
qsample2 = quercus[sample(1:nrow(quercus), 150),]
combined_sample = rbind(qsample1, qsample2)
ggplot(data = combined_sample, aes(x = Latitude, y = ..density.., fill = "red", alpha = 0.5)) + geom_histogram() + geom_histogram(data = quercus, aes(x = Latitude, y = ..density.., fill = "blue", alpha = 0.5)) + ggtitle("Red: combined samples \nBlue: original data")
data("quercus")
qsample1 = quercus[sample(1:nrow(quercus), 150),]
qsample2 = quercus[sample(1:nrow(quercus), 150),]
combined_sample = rbind(qsample1, qsample2)
ggplot(data = combined_sample) + geom_histogram(aes(x = Latitude, y = ..density.., fill = "red", alpha = 0.5)) + geom_histogram(data = quercus, aes(x = Latitude, y = ..density.., fill = "blue", alpha = 0.5)) + ggtitle("Red: combined samples \nBlue: original data")
data("quercus")
qsample1 = quercus[sample(1:nrow(quercus), 150),]
qsample2 = quercus[sample(1:nrow(quercus), 150),]
combined_sample = rbind(qsample1, qsample2)
ggplot(data = combined_sample) + geom_histogram(aes(x = Latitude, y = ..density.., fill = "red", alpha = 0.5)) + geom_histogram(data = quercus, aes(x = Latitude, y = ..density.., fill = "green", alpha = 0.5)) + ggtitle("Red: combined samples \nBlue: original data")
data("quercus")
qsample1 = quercus[sample(1:nrow(quercus), 150),]
qsample2 = quercus[sample(1:nrow(quercus), 150),]
combined_sample = rbind(qsample1, qsample2)
ggplot(data = combined_sample) + geom_histogram(aes(x = Latitude, y = ..density.., fill = "red", alpha = 0.5)) + geom_histogram(data = quercus, aes(x = Latitude, y = ..density.., fill = "black", alpha = 0.5)) + ggtitle("Red: combined samples \nBlue: original data")
data("quercus")
qsample1 = quercus[sample(1:nrow(quercus), 150),]
qsample2 = quercus[sample(1:nrow(quercus), 150),]
combined_sample = rbind(qsample1, qsample2)
ggplot(data = combined_sample) + geom_histogram(aes(x = Latitude, y = ..density.., fill = "red", alpha = 0.5)) + geom_histogram(data = quercus, aes(x = Latitude, y = ..density.., fill = "yellow", alpha = 0.5)) + ggtitle("Red: combined samples \nBlue: original data")
data("quercus")
qsample1 = quercus[sample(1:nrow(quercus), 150),]
qsample2 = quercus[sample(1:nrow(quercus), 150),]
combined_sample = rbind(qsample1, qsample2)
ggplot(data = combined_sample) + geom_histogram(aes(x = Latitude, y = ..density.., fill = "blue", alpha = 0.5)) + geom_histogram(data = quercus, aes(x = Latitude, y = ..density.., fill = "red", alpha = 0.5)) + ggtitle("Red: combined samples \nBlue: original data")
data("quercus")
qsample1 = quercus[sample(1:nrow(quercus), 150),]
qsample2 = quercus[sample(1:nrow(quercus), 150),]
combined_sample = rbind(qsample1, qsample2)
ggplot(data = combined_sample) + geom_histogram(aes(x = Latitude, y = ..density.., fill = "blue", alpha = 0.7)) + geom_histogram(data = quercus, aes(x = Latitude, y = ..density.., fill = "red", alpha = 0.5)) + ggtitle("Red: combined samples \nBlue: original data")
data("quercus")
qsample1 = quercus[sample(1:nrow(quercus), 150),]
qsample2 = quercus[sample(1:nrow(quercus), 150),]
combined_sample = rbind(qsample1, qsample2)
ggplot(data = combined_sample) + geom_histogram(aes(x = Latitude, y = ..density.., fill = "blue", alpha = 0.5)) + geom_histogram(data = quercus, aes(x = Latitude, y = ..density.., fill = "red", alpha = 0.5)) + ggtitle("Red: combined samples \nBlue: original data")
data("quercus")
qsample1 = quercus[sample(1:nrow(quercus), 150),]
qsample2 = quercus[sample(1:nrow(quercus), 150),]
combined_sample = rbind(qsample1, qsample2)
ggplot(data = combined_sample) + geom_histogram(aes(x = Latitude, y = ..density.., alpha = 0.5)) + geom_histogram(data = quercus, aes(x = Latitude, y = ..density.., alpha = 0.5)) + ggtitle("Red: combined samples \nBlue: original data")
data("quercus")
qsample1 = quercus[sample(1:nrow(quercus), 150),]
qsample2 = quercus[sample(1:nrow(quercus), 150),]
combined_sample = rbind(qsample1, qsample2)
ggplot(data = combined_sample) + geom_histogram(aes(x = Latitude, y = ..density.., fill = "blue", alpha = 0.5)) + geom_histogram(data = quercus, aes(x = Latitude, y = ..density.., fill = "red", alpha = 0.5)) + ggtitle("Red: combined samples \nBlue: original data")
data("quercus")
qsample1 = quercus[sample(1:nrow(quercus), 150),]
qsample2 = quercus[sample(1:nrow(quercus), 150),]
combined_sample = rbind(qsample1, qsample2)
ggplot(data = combined_sample) + geom_histogram(aes(x = Latitude, y = ..density.., fill = "red", alpha = 0.5)) + geom_histogram(data = quercus, aes(x = Latitude, y = ..density.., fill = "blue", alpha = 0.5)) + ggtitle("Red: combined samples \nBlue: original data")
data("quercus")
qsample1 = quercus[sample(1:nrow(quercus), 150),]
qsample2 = quercus[sample(1:nrow(quercus), 150),]
combined_sample = rbind(qsample1, qsample2)
ggplot(data = combined_sample) + geom_histogram(aes(x = Latitude, y = ..density..), fill = "red", alpha = 0.5) + geom_histogram(data = quercus, aes(x = Latitude, y = ..density..), fill = "blue", alpha = 0.5) + ggtitle("Red: combined samples \nBlue: original data")
data("quercus")
qsample1 = quercus[sample(1:nrow(quercus), 150),]
qsample2 = quercus[sample(1:nrow(quercus), 150),]
combined_sample = rbind(qsample1, qsample2)
ggplot(data = combined_sample) + geom_histogram(aes(x = Latitude, y = ..density..), fill = "red", alpha = 0.5) + geom_histogram(data = quercus, aes(x = Latitude, y = ..density..), fill = "lightblue", alpha = 0.5) + ggtitle("Red: combined samples \nBlue: original data")
data("quercus")
qsample1 = quercus[sample(1:nrow(quercus), 150),]
qsample2 = quercus[sample(1:nrow(quercus), 150),]
combined_sample = rbind(qsample1, qsample2)
ggplot(data = combined_sample) + geom_histogram(aes(x = Latitude, y = ..density..), fill = "red", alpha = 0.5) + geom_histogram(data = quercus, aes(x = Latitude, y = ..density..), fill = "bluegreen", alpha = 0.5) + ggtitle("Red: combined samples \nBlue: original data")
data("quercus")
qsample1 = quercus[sample(1:nrow(quercus), 150),]
qsample2 = quercus[sample(1:nrow(quercus), 150),]
combined_sample = rbind(qsample1, qsample2)
ggplot(data = combined_sample) + geom_histogram(aes(x = Latitude, y = ..density..), fill = "red", alpha = 0.5) + geom_histogram(data = quercus, aes(x = Latitude, y = ..density..), fill = "green", alpha = 0.5) + ggtitle("Red: combined samples \nBlue: original data")
data("quercus")
qsample1 = quercus[sample(1:nrow(quercus), 150),]
qsample2 = quercus[sample(1:nrow(quercus), 150),]
combined_sample = rbind(qsample1, qsample2)
ggplot(data = combined_sample) + geom_histogram(aes(x = Latitude, y = ..density..), fill = "red", alpha = 0.5) + geom_histogram(data = quercus, aes(x = Latitude, y = ..density..), fill = "blue", alpha = 0.5) + ggtitle("Red: combined samples \nBlue: original data")
ggplot(data.frame(null), aes(x = jaccard, y = ..density..)) + geom_histogram(bins = 100) + geom_point(aes(x = observed["jaccard"], y = 0), color = "red") + ggtitle("Distribution of jaccard distance")
ggplot(data.frame(null), aes(x = sorensen, y = ..density..)) + geom_histogram(bins = 100) + geom_point(aes(x = observed["sorensen"], y = 0), color = "red") + ggtitle("Distribution of sorensen distance")
ggplot(data.frame(null), aes(x = frac_unique_1, y = ..density..)) + geom_histogram(bins = 100) + geom_point(aes(x = observed["frac_unique_1"], y = 0), color = "red") + ggtitle("Distribution of fraction of Hypervolume 1 that is unique")
ggplot(data.frame(null), aes(x = frac_unique_2, y = ..density..)) + geom_histogram(bins = 100) + geom_point(aes(x = observed["frac_unique_2"], y = 0), color = "red") + ggtitle("Distribution of fraction of Hypervolume 2 that is unique")
data("iris")
iris
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) + geom_point()
data(iris)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) + geom_point()
data(iris)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) + geom_point()
hv_setosa = hypervolume(iris[iris$Species == "setosa", 1:2])
hv_versicolor = hypervolume(iris[iris$Species == "versicolor", 1:2])
hv_combine = hypervolume(iris[iris$Species == "versicolor" | iris$Species == "setosa", 1:2])
getDoParWorkers()
power_test_path = resample("power test bootstrap", hv_combine, "bootstrap", n = 200, points_per_resample = 50)
power_test_path
#power_test_path = resample("power test bootstrap", hv_combine, "bootstrap", n = 200, points_per_resample = 50)
power_test_path = "C:/Users/14842/Desktop/Hypervolumes-Resampling/Objects/power test bootstrap"
# Observed statistics
observed_iris_stats = hypervolume_overlap_statistics(hypervolume_set(hv_setosa, hv_versicolor, check.memory = FALSE))
# Generate null distribution of statitics
null_iris = foreach(i = 1:100, .combine = rbind) %:%
foreach(j = 101:200, .combine = rbind) %dopar% {
h1 = readRDS(file.path(power_test_path, list.files(power_test_path)[i]))
h2 = readRDS(file.path(power_test_path, list.files(power_test_path)[j]))
hypervolume_overlap_statistics(hypervolume_set(h1, h2, check.memory = FALSE))
}
null_iris
ggplot(data.frame(null_iris), aes(x = jaccard, y = ..density..)) +
geom_histogram(bins = 100) +
geom_point(aes(x = observed_iris_stats["jaccard"], y = 0), color = "red") +
ggtitle("Distribution of jaccard distance")
ggplot(data.frame(null_iris), aes(x = sorensen, y = ..density..)) +
geom_histogram(bins = 100) +
geom_point(aes(x = observed_iris_stats["sorensen"], y = 0), color = "red") +
ggtitle("Distribution of sorensen distance")
ggplot(data.frame(null_iris), aes(x = frac_unique_1, y = ..density..)) +
geom_histogram(bins = 100) +
geom_point(aes(x = observed_iris_stats["frac_unique_1"], y = 0), color = "red") +
ggtitle("Distribution of fraction of Hypervolume 1 that is unique")
ggplot(data.frame(null_iris), aes(x = frac_unique_2, y = ..density..)) +
geom_histogram(bins = 100) +
geom_point(aes(x = observed_iris_stats["frac_unique_2"], y = 0), color = "red") +
ggtitle("Distribution of fraction of Hypervolume 2 that is unique")
ggplot(data.frame(null_iris), aes(x = jaccard, y = ..density..)) +
geom_histogram(bins = 100) +
geom_point(aes(x = observed_iris_stats["jaccard"], y = 0), color = "red") +
ggtitle("Distribution of jaccard index")
ggplot(data.frame(null_iris), aes(x = sorensen, y = ..density..)) +
geom_histogram(bins = 100) +
geom_point(aes(x = observed_iris_stats["sorensen"], y = 0), color = "red") +
ggtitle("Distribution of sorensen index")
ggplot(data.frame(null_iris), aes(x = frac_unique_1, y = ..density..)) +
geom_histogram(bins = 100) +
geom_point(aes(x = observed_iris_stats["frac_unique_1"], y = 0), color = "red") +
ggtitle("Distribution of fraction of Hypervolume 1 that is unique")
ggplot(data.frame(null_iris), aes(x = frac_unique_2, y = ..density..)) +
geom_histogram(bins = 100) +
geom_point(aes(x = observed_iris_stats["frac_unique_2"], y = 0), color = "red") +
ggtitle("Distribution of fraction of Hypervolume 2 that is unique")
stopCluster(cl)
stopImplicitCluster()
registerDoSEQ()
View(copy_param_hypervolume)
View(copy_param_hypervolume)
getDoParWorkers()
# Permutations of hypervolumes from two input hypervolumes
permute <- function(name, hv1, hv2, n = 50, cores = 1) {
exists_cluster = TRUE
if(cores > 1 & getDoParWorkers() == 1) {
cl = makeCluster(cores)
clusterEvalQ(cl, {
library(hypervolume)
library(foreach)
library(mvtnorm)
source('Utils.R')
})
registerDoParallel(cl)
exists_cluster = FALSE
}
dir.create(file.path('./Objects', name))
if(verbose) {
pb = progress_bar$new(total = n)
}
foreach(i = 1:n, .combine = c) %dopar% {
combined_data = rbind(hv1@Data, hv2@Data)
perm_idx = sample(1:nrow(combined_data), nrow(hv1@Data))
h1 = copy_param_hypervolume(hv1, combined_data[perm_idx,], name = "hv1")
h2 = copy_param_hypervolume(hv2, combined_data[-1 * perm_idx,], name = "hv2")
subdir = file.path("./Objects", name, paste0("permutation", as.character(i)))
dir.create(subdir)
name1 = paste0(h1@Name, '.rds')
name2 = paste0(h2@Name, '.rds')
saveRDS(h1, file.path('./Objects', name, subdir, name1))
saveRDS(h2, file.path('./Objects', name, subdir, name2))
if(verbose) {
pb$tick()
}
}
if(!exists_cluster) {
stopCluster(cl)
registerDoSEQ()
}
}
perm_path = permute("Quercus_perm_150", hv1, hv2, cores = 20)
perm_path = permute("Quercus_perm_150", hv1, hv2, n = 200, cores = 20)
# Permutations of hypervolumes from two input hypervolumes
permute <- function(name, hv1, hv2, n = 50, cores = 1, verbose = TRUE) {
exists_cluster = TRUE
if(cores > 1 & getDoParWorkers() == 1) {
cl = makeCluster(cores)
clusterEvalQ(cl, {
library(hypervolume)
library(foreach)
library(mvtnorm)
source('Utils.R')
})
registerDoParallel(cl)
exists_cluster = FALSE
}
dir.create(file.path('./Objects', name))
if(verbose) {
pb = progress_bar$new(total = n)
}
foreach(i = 1:n, .combine = c) %dopar% {
combined_data = rbind(hv1@Data, hv2@Data)
perm_idx = sample(1:nrow(combined_data), nrow(hv1@Data))
h1 = copy_param_hypervolume(hv1, combined_data[perm_idx,], name = "hv1")
h2 = copy_param_hypervolume(hv2, combined_data[-1 * perm_idx,], name = "hv2")
subdir = file.path("./Objects", name, paste0("permutation", as.character(i)))
dir.create(subdir)
name1 = paste0(h1@Name, '.rds')
name2 = paste0(h2@Name, '.rds')
saveRDS(h1, file.path('./Objects', name, subdir, name1))
saveRDS(h2, file.path('./Objects', name, subdir, name2))
if(verbose) {
pb$tick()
}
}
if(!exists_cluster) {
stopCluster(cl)
registerDoSEQ()
}
}
perm_path = permute("Quercus_perm_150", hv1, hv2, n = 200, cores = 20)
# Permutations of hypervolumes from two input hypervolumes
permute <- function(name, hv1, hv2, n = 50, cores = 1, verbose = TRUE) {
exists_cluster = TRUE
if(cores > 1 & getDoParWorkers() == 1) {
cl = makeCluster(cores)
clusterEvalQ(cl, {
library(hypervolume)
library(foreach)
library(mvtnorm)
source('Utils.R')
})
registerDoParallel(cl)
exists_cluster = FALSE
}
dir.create(file.path('./Objects', name))
if(verbose) {
pb = progress_bar$new(total = n)
}
foreach(i = 1:n, .combine = c) %dopar% {
combined_data = rbind(hv1@Data, hv2@Data)
perm_idx = sample(1:nrow(combined_data), nrow(hv1@Data))
h1 = copy_param_hypervolume(hv1, combined_data[perm_idx,], name = "hv1")
h2 = copy_param_hypervolume(hv2, combined_data[-1 * perm_idx,], name = "hv2")
subdir = file.path("./Objects", name, paste0("permutation", as.character(i)))
dir.create(subdir)
name1 = paste0(h1@Name, '.rds')
name2 = paste0(h2@Name, '.rds')
saveRDS(h1, file.path('./Objects', name, paste0("permutation", as.character(i)), name1))
saveRDS(h2, file.path('./Objects', name, paste0("permutation", as.character(i)), name2))
if(verbose) {
pb$tick()
}
}
if(!exists_cluster) {
stopCluster(cl)
registerDoSEQ()
}
}
perm_path = permute("Quercus_perm_150", hv1, hv2, n = 200, cores = 20)
perm_path
# Permutations of hypervolumes from two input hypervolumes
permute <- function(name, hv1, hv2, n = 50, cores = 1, verbose = TRUE) {
exists_cluster = TRUE
if(cores > 1 & getDoParWorkers() == 1) {
cl = makeCluster(cores)
clusterEvalQ(cl, {
library(hypervolume)
library(foreach)
library(mvtnorm)
source('Utils.R')
})
registerDoParallel(cl)
exists_cluster = FALSE
}
dir.create(file.path('./Objects', name))
if(verbose) {
pb = progress_bar$new(total = n)
}
foreach(i = 1:n, .combine = c) %dopar% {
combined_data = rbind(hv1@Data, hv2@Data)
perm_idx = sample(1:nrow(combined_data), nrow(hv1@Data))
h1 = copy_param_hypervolume(hv1, combined_data[perm_idx,], name = "hv1")
h2 = copy_param_hypervolume(hv2, combined_data[-1 * perm_idx,], name = "hv2")
subdir = file.path("./Objects", name, paste0("permutation", as.character(i)))
dir.create(subdir)
name1 = paste0(h1@Name, '.rds')
name2 = paste0(h2@Name, '.rds')
saveRDS(h1, file.path('./Objects', name, paste0("permutation", as.character(i)), name1))
saveRDS(h2, file.path('./Objects', name, paste0("permutation", as.character(i)), name2))
if(verbose) {
pb$tick()
}
}
if(!exists_cluster) {
stopCluster(cl)
registerDoSEQ()
}
return(file.path(getwd(), 'Objects', name))
}
null_path
#perm_path = permute("Quercus_perm_150", hv1, hv2, n = 200, cores = 20)
perm_path = "C:/Users/14842/Desktop/Hypervolumes-Resampling/Objects/Quercus_perm_150"
perm_null = foreach(i = list.files(perm_path), .combine = rbind) %dopar% {
h1 = readRDS(file.path(perm_path, i, "hv1.rds"))
h2 = readRDS(file.path(perm_path, i, "hv2.rds"))
hypervolume_overlap_statistics(hypervolume_set(h1, h2, check.memory = FALSE))
}
warnings()
# Permutations of hypervolumes from two input hypervolumes
permute <- function(name, hv1, hv2, n = 50, cores = 1, verbose = TRUE) {
exists_cluster = TRUE
if(cores > 1 & getDoParWorkers() == 1) {
cl = makeCluster(cores)
clusterEvalQ(cl, {
library(hypervolume)
source('Utils.R')
})
registerDoParallel(cl)
exists_cluster = FALSE
}
dir.create(file.path('./Objects', name))
if(verbose) {
pb = progress_bar$new(total = n)
}
foreach(i = 1:n, .combine = c) %dopar% {
combined_data = rbind(hv1@Data, hv2@Data)
perm_idx = sample(1:nrow(combined_data), nrow(hv1@Data))
h1 = copy_param_hypervolume(hv1, combined_data[perm_idx,], name = "hv1")
h2 = copy_param_hypervolume(hv2, combined_data[-1 * perm_idx,], name = "hv2")
subdir = file.path("./Objects", name, paste0("permutation", as.character(i)))
dir.create(subdir)
name1 = paste0(h1@Name, '.rds')
name2 = paste0(h2@Name, '.rds')
saveRDS(h1, file.path('./Objects', name, paste0("permutation", as.character(i)), name1))
saveRDS(h2, file.path('./Objects', name, paste0("permutation", as.character(i)), name2))
if(verbose) {
pb$tick()
}
}
if(!exists_cluster) {
stopCluster(cl)
registerDoSEQ()
}
return(file.path(getwd(), 'Objects', name))
}
ggplot(data.frame(perm_null), aes(x = jaccard, y = ..density..)) +
geom_histogram(bins = 30) +
geom_point(aes(x = observed["jaccard"], y = 0), color = "red") +
ggtitle("Distribution of jaccard index")
ggplot(data.frame(perm_null), aes(x = sorensen, y = ..density..)) +
geom_histogram(bins = 30) +
geom_point(aes(x = observed["sorensen"], y = 0), color = "red") +
ggtitle("Distribution of sorensen index")
ggplot(data.frame(perm_null), aes(x = frac_unique_1, y = ..density..)) +
geom_histogram(bins = 30) +
geom_point(aes(x = observed["frac_unique_1"], y = 0), color = "red") +
ggtitle("Distribution of fraction of Hypervolume 1 that is unique")
ggplot(data.frame(perm_null), aes(x = frac_unique_2, y = ..density..)) +
geom_histogram(bins = 30) +
geom_point(aes(x = observed["frac_unique_2"], y = 0), color = "red") +
ggtitle("Distribution of fraction of Hypervolume 2 that is unique")
ggplot(data.frame(perm_null), aes(x = jaccard, y = ..density..)) +
geom_histogram(aes(x = jaccard, y = ..density..), data = data.frame(null), bins = 100, fill = "blue", alpha = 0.5)
geom_histogram(bins = 30, fill = "red", alpha = 0.5) +
geom_point(aes(x = observed["jaccard"], y = 0), color = "red") +
ggtitle("Distribution of jaccard index")
ggplot(data.frame(perm_null), aes(x = jaccard, y = ..density..)) +
geom_histogram(aes(x = jaccard, y = ..density..), data = data.frame(null), bins = 100, fill = "blue", alpha = 0.5) +
geom_histogram(bins = 30, fill = "red", alpha = 0.5) +
geom_point(aes(x = observed["jaccard"], y = 0), color = "red") +
ggtitle("Distribution of jaccard index")
ggplot(data.frame(perm_null), aes(x = sorensen, y = ..density..)) +
geom_histogram(bins = 30) +
geom_point(aes(x = observed["sorensen"], y = 0), color = "red") +
ggtitle("Distribution of sorensen index")
ggplot(data.frame(perm_null), aes(x = frac_unique_1, y = ..density..)) +
geom_histogram(bins = 30) +
geom_point(aes(x = observed["frac_unique_1"], y = 0), color = "red") +
ggtitle("Distribution of fraction of Hypervolume 1 that is unique")
ggplot(data.frame(perm_null), aes(x = frac_unique_2, y = ..density..)) +
geom_histogram(bins = 30) +
geom_point(aes(x = observed["frac_unique_2"], y = 0), color = "red") +
ggtitle("Distribution of fraction of Hypervolume 2 that is unique")
ggplot(data.frame(perm_null), aes(x = jaccard, y = ..density..)) +
geom_histogram(aes(x = jaccard, y = ..density..), data = data.frame(null), bins = 100, fill = "blue", alpha = 0.5) +
geom_histogram(bins = 30, fill = "red", alpha = 0.5) +
geom_point(aes(x = observed["jaccard"], y = 0), color = "red") +
ggtitle("Distribution of jaccard index")
ggplot(data.frame(perm_null), aes(x = sorensen, y = ..density..)) +
geom_histogram(aes(x = sorensen, y = ..density..), data = data.frame(null), bins = 100, fill = "blue", alpha = 0.5) +
geom_histogram(bins = 30, fill = "red", alpha = 0.5) +
geom_point(aes(x = observed["sorensen"], y = 0), color = "red") +
ggtitle("Distribution of sorensen index")
ggplot(data.frame(perm_null), aes(x = frac_unique_1, y = ..density..)) +
geom_histogram(bins = 30) +
geom_point(aes(x = observed["frac_unique_1"], y = 0), color = "red") +
ggtitle("Distribution of fraction of Hypervolume 1 that is unique")
ggplot(data.frame(perm_null), aes(x = frac_unique_2, y = ..density..)) +
geom_histogram(bins = 30) +
geom_point(aes(x = observed["frac_unique_2"], y = 0), color = "red") +
ggtitle("Distribution of fraction of Hypervolume 2 that is unique")
ggplot(data.frame(perm_null), aes(x = jaccard, y = ..density..)) +
geom_histogram(aes(x = jaccard, y = ..density..), data = data.frame(null), bins = 100, fill = "blue", alpha = 0.5) +
geom_histogram(bins = 30, fill = "red", alpha = 0.5) +
geom_point(aes(x = observed["jaccard"], y = 0), color = "red") +
ggtitle("Distribution of jaccard index")
ggplot(data.frame(perm_null), aes(x = sorensen, y = ..density..)) +
geom_histogram(aes(x = sorensen, y = ..density..), data = data.frame(null), bins = 100, fill = "blue", alpha = 0.5) +
geom_histogram(bins = 30, fill = "red", alpha = 0.5) +
geom_point(aes(x = observed["sorensen"], y = 0), color = "red") +
ggtitle("Distribution of sorensen index")
ggplot(data.frame(perm_null), aes(x = frac_unique_1, y = ..density..)) +
geom_histogram(aes(x = frac_unique_1, y = ..density..), data = data.frame(null), bins = 100, fill = "blue", alpha = 0.5) +
geom_histogram(bins = 30, fill = "red", alpha = 0.5) +
geom_point(aes(x = observed["frac_unique_1"], y = 0), color = "red") +
ggtitle("Distribution of fraction of Hypervolume 1 that is unique")
ggplot(data.frame(perm_null), aes(x = frac_unique_2, y = ..density..)) +
geom_histogram(aes(x = frac_unique_2, y = ..density..), data = data.frame(null), bins = 100, fill = "blue", alpha = 0.5) +
geom_histogram(bins = 30, fill = "red", alpha = 0.5) +
geom_point(aes(x = observed["frac_unique_2"], y = 0), color = "red") +
ggtitle("Distribution of fraction of Hypervolume 2 that is unique")
ggplot(data.frame(perm_null), aes(x = jaccard, y = ..density..)) +
geom_histogram(aes(x = jaccard, y = ..density..), data = data.frame(null), bins = 100, fill = "blue", alpha = 0.5) +
geom_histogram(bins = 30, fill = "red", alpha = 0.5) +
geom_point(aes(x = observed["jaccard"], y = 0), color = "blue") +
ggtitle("Distribution of jaccard index")
ggplot(data.frame(perm_null), aes(x = sorensen, y = ..density..)) +
geom_histogram(aes(x = sorensen, y = ..density..), data = data.frame(null), bins = 100, fill = "blue", alpha = 0.5) +
geom_histogram(bins = 30, fill = "red", alpha = 0.5) +
geom_point(aes(x = observed["sorensen"], y = 0), color = "blue") +
ggtitle("Distribution of sorensen index")
ggplot(data.frame(perm_null), aes(x = frac_unique_1, y = ..density..)) +
geom_histogram(aes(x = frac_unique_1, y = ..density..), data = data.frame(null), bins = 100, fill = "blue", alpha = 0.5) +
geom_histogram(bins = 30, fill = "red", alpha = 0.5) +
geom_point(aes(x = observed["frac_unique_1"], y = 0), color = "blue") +
ggtitle("Distribution of fraction of Hypervolume 1 that is unique")
ggplot(data.frame(perm_null), aes(x = frac_unique_2, y = ..density..)) +
geom_histogram(aes(x = frac_unique_2, y = ..density..), data = data.frame(null), bins = 100, fill = "blue", alpha = 0.5) +
geom_histogram(bins = 30, fill = "red", alpha = 0.5) +
geom_point(aes(x = observed["frac_unique_2"], y = 0), color = "blue") +
ggtitle("Distribution of fraction of Hypervolume 2 that is unique")
ggplot(data.frame(null), aes(x = jaccard, y = ..density..)) +
geom_histogram(bins = 100) +
geom_point(aes(x = observed["jaccard"], y = 0), color = "red") +
ggtitle("Distribution of jaccard index")
ggplot(data.frame(null), aes(x = sorensen, y = ..density..)) +
geom_histogram(bins = 100) +
geom_point(aes(x = observed["sorensen"], y = 0), color = "red") +
ggtitle("Distribution of sorensen index")
ggplot(data.frame(null), aes(x = frac_unique_1, y = ..density..)) +
geom_histogram(bins = 100) +
geom_point(aes(x = observed["frac_unique_1"], y = 0), color = "red") +
ggtitle("Distribution of fraction of Hypervolume 1 that is unique")
ggplot(data.frame(null), aes(x = frac_unique_2, y = ..density..)) +
geom_histogram(bins = 100) +
geom_point(aes(x = observed["frac_unique_2"], y = 0), color = "red") +
ggtitle("Distribution of fraction of Hypervolume 2 that is unique")
